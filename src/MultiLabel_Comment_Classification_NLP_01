{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"2f_42FoV4Hwm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1681110327199,"user_tz":-210,"elapsed":44875,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"}},"outputId":"0ffb2f9f-426c-48fa-e800-35cb493f135d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"]},{"cell_type":"markdown","metadata":{"id":"E6PmZ5MnhByg"},"source":["#``Install and import Libraries``"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"UT2EOWDgZaJf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1681110397515,"user_tz":-210,"elapsed":65431,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"}},"outputId":"19df383b-6101-4727-cb38-d877bba6540b"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/316.7 KB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m316.7/316.7 KB\u001b[0m \u001b[31m10.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.4/1.4 MB\u001b[0m \u001b[31m56.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m233.6/233.6 KB\u001b[0m \u001b[31m25.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for nltk (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for libwapiti (setup.py) ... \u001b[?25l\u001b[?25hdone\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m53.1/53.1 KB\u001b[0m \u001b[31m3.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m175.4/175.4 KB\u001b[0m \u001b[31m13.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m235.9/235.9 KB\u001b[0m \u001b[31m26.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Building wheel for emoji (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting plotfa\n","  Downloading plotfa-0.0.5-py3-none-any.whl (16 kB)\n","Requirement already satisfied: seaborn in /usr/local/lib/python3.9/dist-packages (from plotfa) (0.12.2)\n","Collecting python-bidi\n","  Downloading python_bidi-0.4.2-py2.py3-none-any.whl (30 kB)\n","Collecting arabic-reshaper\n","  Downloading arabic_reshaper-3.0.0-py3-none-any.whl (20 kB)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.9/dist-packages (from plotfa) (3.7.1)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib->plotfa) (3.0.9)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib->plotfa) (4.39.3)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib->plotfa) (8.4.0)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.9/dist-packages (from matplotlib->plotfa) (2.8.2)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib->plotfa) (1.4.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib->plotfa) (23.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib->plotfa) (1.0.7)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.9/dist-packages (from matplotlib->plotfa) (0.11.0)\n","Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.9/dist-packages (from matplotlib->plotfa) (1.22.4)\n","Requirement already satisfied: importlib-resources>=3.2.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib->plotfa) (5.12.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.9/dist-packages (from python-bidi->plotfa) (1.16.0)\n","Requirement already satisfied: pandas>=0.25 in /usr/local/lib/python3.9/dist-packages (from seaborn->plotfa) (1.4.4)\n","Requirement already satisfied: zipp>=3.1.0 in /usr/local/lib/python3.9/dist-packages (from importlib-resources>=3.2.0->matplotlib->plotfa) (3.15.0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.9/dist-packages (from pandas>=0.25->seaborn->plotfa) (2022.7.1)\n","Installing collected packages: arabic-reshaper, python-bidi, plotfa\n","Successfully installed arabic-reshaper-3.0.0 plotfa-0.0.5 python-bidi-0.4.2\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting transformers\n","  Downloading transformers-4.27.4-py3-none-any.whl (6.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.8/6.8 MB\u001b[0m \u001b[31m68.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.9/dist-packages (from transformers) (4.65.0)\n","Collecting tokenizers!=0.11.3,<0.14,>=0.11.1\n","  Downloading tokenizers-0.13.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (7.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.8/7.8 MB\u001b[0m \u001b[31m106.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: requests in /usr/local/lib/python3.9/dist-packages (from transformers) (2.27.1)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.9/dist-packages (from transformers) (2022.10.31)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.9/dist-packages (from transformers) (23.0)\n","Collecting huggingface-hub<1.0,>=0.11.0\n","  Downloading huggingface_hub-0.13.4-py3-none-any.whl (200 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m200.1/200.1 KB\u001b[0m \u001b[31m25.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.9/dist-packages (from transformers) (1.22.4)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.9/dist-packages (from transformers) (3.10.7)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.9/dist-packages (from transformers) (6.0)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.9/dist-packages (from huggingface-hub<1.0,>=0.11.0->transformers) (4.5.0)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.9/dist-packages (from requests->transformers) (2.0.12)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.9/dist-packages (from requests->transformers) (3.4)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.9/dist-packages (from requests->transformers) (1.26.15)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/dist-packages (from requests->transformers) (2022.12.7)\n","Installing collected packages: tokenizers, huggingface-hub, transformers\n","Successfully installed huggingface-hub-0.13.4 tokenizers-0.13.3 transformers-4.27.4\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting tensorflow-addons\n","  Downloading tensorflow_addons-0.20.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (591 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m591.0/591.0 KB\u001b[0m \u001b[31m15.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: packaging in /usr/local/lib/python3.9/dist-packages (from tensorflow-addons) (23.0)\n","Collecting typeguard<3.0.0,>=2.7\n","  Downloading typeguard-2.13.3-py3-none-any.whl (17 kB)\n","Installing collected packages: typeguard, tensorflow-addons\n","Successfully installed tensorflow-addons-0.20.0 typeguard-2.13.3\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting autokeras\n","  Downloading autokeras-1.1.0-py3-none-any.whl (148 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m148.6/148.6 KB\u001b[0m \u001b[31m7.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting keras-nlp>=0.4.0\n","  Downloading keras_nlp-0.4.1-py3-none-any.whl (466 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m466.8/466.8 KB\u001b[0m \u001b[31m30.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: tensorflow>=2.8.0 in /usr/local/lib/python3.9/dist-packages (from autokeras) (2.12.0)\n","Collecting keras-tuner>=1.1.0\n","  Downloading keras_tuner-1.3.4-py3-none-any.whl (172 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m172.2/172.2 KB\u001b[0m \u001b[31m22.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: packaging in /usr/local/lib/python3.9/dist-packages (from autokeras) (23.0)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.9/dist-packages (from autokeras) (1.4.4)\n","Collecting tensorflow-text\n","  Downloading tensorflow_text-2.12.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (6.0 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.0/6.0 MB\u001b[0m \u001b[31m82.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.9/dist-packages (from keras-nlp>=0.4.0->autokeras) (1.22.4)\n","Requirement already satisfied: absl-py in /usr/local/lib/python3.9/dist-packages (from keras-nlp>=0.4.0->autokeras) (1.4.0)\n","Requirement already satisfied: protobuf<=3.20.3 in /usr/local/lib/python3.9/dist-packages (from keras-tuner>=1.1.0->autokeras) (3.20.3)\n","Collecting kt-legacy\n","  Downloading kt_legacy-1.0.4-py3-none-any.whl (9.6 kB)\n","Requirement already satisfied: requests in /usr/local/lib/python3.9/dist-packages (from keras-tuner>=1.1.0->autokeras) (2.27.1)\n","Requirement already satisfied: flatbuffers>=2.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow>=2.8.0->autokeras) (23.3.3)\n","Requirement already satisfied: keras<2.13,>=2.12.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow>=2.8.0->autokeras) (2.12.0)\n","Requirement already satisfied: tensorboard<2.13,>=2.12 in /usr/local/lib/python3.9/dist-packages (from tensorflow>=2.8.0->autokeras) (2.12.1)\n","Requirement already satisfied: tensorflow-estimator<2.13,>=2.12.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow>=2.8.0->autokeras) (2.12.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.9/dist-packages (from tensorflow>=2.8.0->autokeras) (1.53.0)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.9/dist-packages (from tensorflow>=2.8.0->autokeras) (3.3.0)\n","Requirement already satisfied: gast<=0.4.0,>=0.2.1 in /usr/local/lib/python3.9/dist-packages (from tensorflow>=2.8.0->autokeras) (0.4.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.9/dist-packages (from tensorflow>=2.8.0->autokeras) (0.2.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow>=2.8.0->autokeras) (1.6.3)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow>=2.8.0->autokeras) (16.0.0)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow>=2.8.0->autokeras) (3.8.0)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow>=2.8.0->autokeras) (1.16.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.9/dist-packages (from tensorflow>=2.8.0->autokeras) (4.5.0)\n","Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow>=2.8.0->autokeras) (1.14.1)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow>=2.8.0->autokeras) (2.2.0)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.9/dist-packages (from tensorflow>=2.8.0->autokeras) (0.32.0)\n","Requirement already satisfied: jax>=0.3.15 in /usr/local/lib/python3.9/dist-packages (from tensorflow>=2.8.0->autokeras) (0.4.7)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.9/dist-packages (from tensorflow>=2.8.0->autokeras) (67.6.1)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.9/dist-packages (from pandas->autokeras) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.9/dist-packages (from pandas->autokeras) (2022.7.1)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.9/dist-packages (from astunparse>=1.6.0->tensorflow>=2.8.0->autokeras) (0.40.0)\n","Requirement already satisfied: ml-dtypes>=0.0.3 in /usr/local/lib/python3.9/dist-packages (from jax>=0.3.15->tensorflow>=2.8.0->autokeras) (0.0.4)\n","Requirement already satisfied: scipy>=1.7 in /usr/local/lib/python3.9/dist-packages (from jax>=0.3.15->tensorflow>=2.8.0->autokeras) (1.10.1)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.13,>=2.12->tensorflow>=2.8.0->autokeras) (1.8.1)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.13,>=2.12->tensorflow>=2.8.0->autokeras) (3.4.3)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.13,>=2.12->tensorflow>=2.8.0->autokeras) (0.7.0)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.13,>=2.12->tensorflow>=2.8.0->autokeras) (2.17.1)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.13,>=2.12->tensorflow>=2.8.0->autokeras) (2.2.3)\n","Requirement already satisfied: google-auth-oauthlib<1.1,>=0.5 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.13,>=2.12->tensorflow>=2.8.0->autokeras) (1.0.0)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.9/dist-packages (from requests->keras-tuner>=1.1.0->autokeras) (1.26.15)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.9/dist-packages (from requests->keras-tuner>=1.1.0->autokeras) (2.0.12)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.9/dist-packages (from requests->keras-tuner>=1.1.0->autokeras) (3.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/dist-packages (from requests->keras-tuner>=1.1.0->autokeras) (2022.12.7)\n","Requirement already satisfied: tensorflow-hub>=0.8.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow-text->keras-nlp>=0.4.0->autokeras) (0.13.0)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.9/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow>=2.8.0->autokeras) (4.9)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.9/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow>=2.8.0->autokeras) (5.3.0)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.9/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow>=2.8.0->autokeras) (0.2.8)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.9/dist-packages (from google-auth-oauthlib<1.1,>=0.5->tensorboard<2.13,>=2.12->tensorflow>=2.8.0->autokeras) (1.3.1)\n","Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.9/dist-packages (from markdown>=2.6.8->tensorboard<2.13,>=2.12->tensorflow>=2.8.0->autokeras) (6.1.0)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.9/dist-packages (from werkzeug>=1.0.1->tensorboard<2.13,>=2.12->tensorflow>=2.8.0->autokeras) (2.1.2)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.9/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.13,>=2.12->tensorflow>=2.8.0->autokeras) (3.15.0)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.9/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow>=2.8.0->autokeras) (0.4.8)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.9/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<1.1,>=0.5->tensorboard<2.13,>=2.12->tensorflow>=2.8.0->autokeras) (3.2.2)\n","Installing collected packages: kt-legacy, tensorflow-text, keras-tuner, keras-nlp, autokeras\n","Successfully installed autokeras-1.1.0 keras-nlp-0.4.1 keras-tuner-1.3.4 kt-legacy-1.0.4 tensorflow-text-2.12.0\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/tensorflow_addons/utils/tfa_eol_msg.py:23: UserWarning: \n","\n","TensorFlow Addons (TFA) has ended development and introduction of new features.\n","TFA has entered a minimal maintenance and release mode until a planned end of life in May 2024.\n","Please modify downstream libraries to take dependencies from other repositories in our TensorFlow community (e.g. Keras, Keras-CV, and Keras-NLP). \n","\n","For more information see: https://github.com/tensorflow/addons/issues/2807 \n","\n","  warnings.warn(\n"]}],"source":["!pip install -q hazm\n","!pip install -q clean-text[gpl]\n","!pip install plotfa\n","!pip install transformers\n","!pip install tensorflow-addons\n","!pip install autokeras\n","\n","import plotfa\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from hazm import Normalizer , word_tokenize\n","from cleantext import clean\n","import regex as re\n","import json\n","import seaborn as sns\n","import os\n","\n","\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, confusion_matrix ,multilabel_confusion_matrix ,accuracy_score\n","from sklearn.utils.class_weight import compute_class_weight\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","\n","\n","from transformers import BertTokenizer, TFBertModel ,AutoTokenizer ,BertConfig\n","\n","from tensorflow.keras import regularizers\n","from tensorflow.keras.models import load_model\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Embedding, GlobalMaxPool1D, Dropout ,Input\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint\n","import tensorflow as tf\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","import tensorflow.keras.backend as K\n","\n","import tensorflow_addons as tfa\n","import autokeras as ak\n"]},{"cell_type":"markdown","metadata":{"id":"70noFnIlhVMS"},"source":["#``Prepare Data``"]},{"cell_type":"markdown","metadata":{"id":"_7TyTPlJg9zT"},"source":["##Processing Comments"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"hrDAaZfOeY1f","executionInfo":{"status":"ok","timestamp":1681110482734,"user_tz":-210,"elapsed":477,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"}}},"outputs":[],"source":["stop_words = set(open('/content/drive/MyDrive/Roshan_Internship1401/nlp/Cofee-Bazar-comment-clf/dataset/stop-words.txt', encoding='utf8').read().splitlines())\n","\n","def clean_html(s):\n","    return re.sub(re.compile('<.*?>'), '', s)\n","\n","def text_preprocessing(s):\n","  s = s.strip()\n","  \n","  s = clean(s,\n","    fix_unicode=True,               # fix various unicode errors\n","    to_ascii=False,                  # transliterate to closest ASCII representation\n","    lower=True,                     # lowercase text\n","    no_line_breaks=True,           # fully strip line breaks as opposed to only normalizing them\n","    no_urls=True,                  # replace all URLs with a special token\n","    no_emails=True,                # replace all email addresses with a special token\n","    no_phone_numbers=True,         # replace all phone numbers with a special token\n","    no_numbers=False,               # replace all numbers with a special token\n","    no_digits=False,                # replace all digits with a special token\n","    no_currency_symbols=False,      # replace all currency symbols with a special token\n","    no_punct=False,                 # remove punctuations\n","    replace_with_punct=\"\",          # instead of removing punctuations you may replace them\n","    replace_with_url=\"\",\n","    replace_with_email=\"\",\n","    replace_with_phone_number=\"\",\n","    replace_with_number=\"\",\n","    replace_with_digit=\"0\",\n","    replace_with_currency_symbol=\"\",\n","  )\n","  \n","  s = re.sub(re.compile('<.*?>'), '', s)    #clean html tags\n","\n","  normalizer = Normalizer()\n","  s = normalizer.normalize(s)\n","  s = normalizer.character_refinement(s)\n","\n","  s = re.sub(\"\\s+\", \" \", s)         # trailing whitespace\n","  s = re.sub(r'(@.*?)[\\s]', ' ', s) # @ mentions\n","  s = re.sub(\"#\", \"\", s)            # hashtags\n","\n","  tokens = word_tokenize(s)\n","  s = ' '.join(tokens)\n","  return s"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"uIH2yIXree9v","executionInfo":{"status":"ok","timestamp":1681110485177,"user_tz":-210,"elapsed":3,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"}}},"outputs":[],"source":["def get_classes(labels) :\n","  topics = list()\n","  for row in labels:\n","    for x in row :\n","      if x[0] not in topics :\n","        topics.append(x[0])\n","  return topics\n","\n","\n","# string lists to list       '[['اشکال فنی', False]]'          --->         [['اشکال فنی', False]]\n","def labels_to_list( labels ):\n","  for i ,lbl in enumerate(labels) :\n","    if isinstance(lbl ,str) :\n","      try :\n","        labels[i] = json.loads(str(lbl))\n","      except :\n","        print(i)\n","        break\n","  return labels\n","\n","\n","\n","def df_with_hot_label(df) :\n","  df_copy = df.copy()\n","  list_labels = labels_to_list(df.labels.tolist())\n","  classes = get_classes(list_labels)\n","  for lbl in classes :\n","    df_copy[lbl] = np.zeros((df_copy.shape[0] ,1))\n","    for j in range(df.shape[0]) :\n","      for ls in list_labels[j] :\n","        if ls[0]==lbl and ls[1]==True :\n","          df_copy[lbl][j] = 1\n","  return df_copy\n","\n","\n","\n","def reduce_data(df) : \n","  zeros = df[(df[df.columns[3:]] == 0).all(axis=1)]\n","  num = int(zeros.shape[0]*0.15)\n","  zeros = zeros.head(num)\n","  non_zeros = df[(df[df.columns[3:]] != 0).any(axis=1)]\n","  result = pd.concat([zeros, non_zeros], axis=0)\n","  df = result.sample(frac=1, random_state=42).reset_index(drop=True)\n","\n","  return df"]},{"cell_type":"markdown","metadata":{"id":"qRYDWnQTxK4_"},"source":["#Load Data"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":248},"executionInfo":{"elapsed":2481,"status":"ok","timestamp":1681110513941,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"},"user_tz":-210},"id":"48kRHfhtp3Rz","outputId":"9fb12cd3-764e-4121-c990-4adbcc96496d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Data shape :  (162276, 2)\n","Number of nan values : \n"," comments        0\n","labels      51265\n","dtype: int64\n","Data Shape without nan values :  (111011, 2)\n"]},{"output_type":"execute_result","data":{"text/plain":["                                                 comments  \\\n","103218  خیلی خیلی خیلی خیلی خیلی خیلی خیلی خیلی خیلی م...   \n","36635                                    بدترین بازی جهان   \n","93927                                   عالییییییییییی😛😍😍   \n","\n","                                                   labels  \n","103218                         [[\"مقایسه با رقبا\",false]]  \n","36635   [[\"پیشنهاد نرم‌افزاری\",false],[\"مقایسه با رقبا...  \n","93927   [[\"درخواست بروزرسانی\",false],[\"اعتراض به خدمات...  "],"text/html":["\n","  <div id=\"df-d30bb68c-18b4-45b3-a214-56ba0bb9a64b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>comments</th>\n","      <th>labels</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>103218</th>\n","      <td>خیلی خیلی خیلی خیلی خیلی خیلی خیلی خیلی خیلی م...</td>\n","      <td>[[\"مقایسه با رقبا\",false]]</td>\n","    </tr>\n","    <tr>\n","      <th>36635</th>\n","      <td>بدترین بازی جهان</td>\n","      <td>[[\"پیشنهاد نرم‌افزاری\",false],[\"مقایسه با رقبا...</td>\n","    </tr>\n","    <tr>\n","      <th>93927</th>\n","      <td>عالییییییییییی😛😍😍</td>\n","      <td>[[\"درخواست بروزرسانی\",false],[\"اعتراض به خدمات...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d30bb68c-18b4-45b3-a214-56ba0bb9a64b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d30bb68c-18b4-45b3-a214-56ba0bb9a64b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d30bb68c-18b4-45b3-a214-56ba0bb9a64b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}],"source":["data = pd.read_csv('/content/drive/MyDrive/Roshan_Internship1401/nlp/Cofee-Bazar-comment-clf/dataset/game-comments.csv' ,encoding='utf8')\n","data.rename(columns = {'text':'comments' ,'data':'labels'} ,inplace = True)\n","print('Data shape : ' ,data.shape)\n","print('Number of nan values : \\n' ,data.isna().sum())\n","data = data.dropna() #handling missing values\n","print('Data Shape without nan values : ' ,data.shape)\n","categories = get_classes( labels_to_list(data.labels.tolist()) )\n","label2id = {label: i for i, label in enumerate(categories)}\n","id2label = {v: k for k, v in label2id.items()}\n","data.sample(3)"]},{"cell_type":"markdown","source":["## Normalize Comments & Hotting Labels"],"metadata":{"id":"DU51j6mKsJCm"}},{"cell_type":"code","execution_count":7,"metadata":{"id":"ME1kk0kwJbKy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1681110576505,"user_tz":-210,"elapsed":59508,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"}},"outputId":"79e137f1-f3ac-4754-8d84-3aeee857b955"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-5-8b7266e57c0a>:32: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_copy[lbl][j] = 1\n","<ipython-input-5-8b7266e57c0a>:32: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_copy[lbl][j] = 1\n","<ipython-input-5-8b7266e57c0a>:32: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_copy[lbl][j] = 1\n","<ipython-input-5-8b7266e57c0a>:32: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_copy[lbl][j] = 1\n","<ipython-input-5-8b7266e57c0a>:32: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_copy[lbl][j] = 1\n","<ipython-input-5-8b7266e57c0a>:32: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_copy[lbl][j] = 1\n","<ipython-input-5-8b7266e57c0a>:32: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_copy[lbl][j] = 1\n","<ipython-input-5-8b7266e57c0a>:32: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_copy[lbl][j] = 1\n","<ipython-input-5-8b7266e57c0a>:32: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_copy[lbl][j] = 1\n"]}],"source":["data['normalized_comments'] = data['comments'].apply(text_preprocessing)\n","df = df_with_hot_label(data)"]},{"cell_type":"markdown","source":["## Reduce Data "],"metadata":{"id":"fWoiQ3kTsW08"}},{"cell_type":"code","source":["df = reduce_data(df)\n","df = df.drop(columns = ['labels'])\n","print('Data shape : ' ,df.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fiWlpLP8Rwrf","executionInfo":{"status":"ok","timestamp":1681110576506,"user_tz":-210,"elapsed":13,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"}},"outputId":"dc29264b-a7fe-454c-e2d7-52987c8c0eeb"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Data shape :  (39984, 11)\n"]}]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1681110576507,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"},"user_tz":-210},"id":"U6p2G6-sWxBx","outputId":"bf56b922-3b4f-4976-fba8-957191de2332"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                comments  \\\n","20625  خیلی خوبه ولی بیش از حد سخته خواهشآ سری جدیدش ...   \n","27444  آقا دخل و خرج با هم نمی خونه.مثلا؛یه سلاح مثل ...   \n","\n","                                     normalized_comments  مقایسه با رقبا  \\\n","20625  خیلی خوبه ولی بیش از حد سخته خواهشآ سری جدیدش ...             0.0   \n","27444  آقا دخل و خرج با هم نمی‌خونه . مثلا ؛ یه سلاح ...             0.0   \n","\n","       پیشنهاد نرم‌افزاری  درخواست بروزرسانی  اشکال فنی  اعتراض به خدمات  \\\n","20625                 0.0                0.0        0.0              0.0   \n","27444                 0.0                0.0        0.0              0.0   \n","\n","       درخواست راهنمایی  اعتراض به قیمت  مشکل در پرداخت  حجم زیاد نرم‌افزار  \n","20625               0.0             0.0             0.0                 0.0  \n","27444               0.0             1.0             0.0                 0.0  "],"text/html":["\n","  <div id=\"df-63300bf8-d0da-4b8f-bae3-71d97b32e1a8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>comments</th>\n","      <th>normalized_comments</th>\n","      <th>مقایسه با رقبا</th>\n","      <th>پیشنهاد نرم‌افزاری</th>\n","      <th>درخواست بروزرسانی</th>\n","      <th>اشکال فنی</th>\n","      <th>اعتراض به خدمات</th>\n","      <th>درخواست راهنمایی</th>\n","      <th>اعتراض به قیمت</th>\n","      <th>مشکل در پرداخت</th>\n","      <th>حجم زیاد نرم‌افزار</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>20625</th>\n","      <td>خیلی خوبه ولی بیش از حد سخته خواهشآ سری جدیدش ...</td>\n","      <td>خیلی خوبه ولی بیش از حد سخته خواهشآ سری جدیدش ...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>27444</th>\n","      <td>آقا دخل و خرج با هم نمی خونه.مثلا؛یه سلاح مثل ...</td>\n","      <td>آقا دخل و خرج با هم نمی‌خونه . مثلا ؛ یه سلاح ...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-63300bf8-d0da-4b8f-bae3-71d97b32e1a8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-63300bf8-d0da-4b8f-bae3-71d97b32e1a8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-63300bf8-d0da-4b8f-bae3-71d97b32e1a8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}],"source":["df.sample(2)"]},{"cell_type":"markdown","source":["## Define Pretrained Model & Tokenizer"],"metadata":{"id":"PtBCF7qFswVo"}},{"cell_type":"code","source":["MAX_SEQUENCE_LENGTH = 136\n","\n","pretrain_model_name = 'HooshvareLab/bert-fa-zwnj-base' \n","tokenizer = AutoTokenizer.from_pretrained( pretrain_model_name ) \n","bert = TFBertModel.from_pretrained( pretrain_model_name )\n","config = BertConfig.from_pretrained(\n","    pretrain_model_name, **{\n","        'label2id': label2id,\n","        'id2label': id2label,\n","    })"],"metadata":{"id":"R_6_UKP-s3uR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **Split Data & Preprocess it**"],"metadata":{"id":"rnfGBgzUtBdf"}},{"cell_type":"code","source":["def preprocess( texts ):\n","    # Tokenize the text\n","    inputs = tokenizer(\n","        text=texts,\n","        add_special_tokens=True,\n","        max_length= MAX_SEQUENCE_LENGTH ,\n","        truncation=True,\n","        padding=True, \n","        return_tensors='tf',\n","        return_token_type_ids = False,\n","        return_attention_mask = True,\n","        verbose = True)\n","\n","\n","    # Convert the labels to a tensor\n","    return inputs"],"metadata":{"id":"SX6VV1fhtTbF"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FDlGeSyQNbW3"},"outputs":[],"source":["X_train, X_test, y_train, y_test = train_test_split(df.normalized_comments, \n","                                                    df[df.columns[2:]], \n","                                                    test_size=0.2, \n","                                                    random_state=42, \n","                                                    shuffle=True)\n","\n","X_test, X_valid, y_test, y_valid = train_test_split(X_test, \n","                                                    y_test, \n","                                                    test_size=0.5, \n","                                                    random_state=42, \n","                                                    shuffle=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LXIQ1yMsRtab"},"outputs":[],"source":["X_train_v = preprocess(X_train.tolist())\n","X_test_v = preprocess(X_test.tolist())\n","X_valid_v = preprocess(X_valid.tolist())\n","\n","train_input_ids = X_train_v['input_ids']\n","train_attention_mask = X_train_v['attention_mask']\n","\n","test_input_ids = X_test_v['input_ids']\n","test_attention_mask = X_test_v['attention_mask']\n","\n","valid_input_ids = X_valid_v['input_ids']\n","valid_attention_mask = X_valid_v['attention_mask']\n","\n","\n","y_train = y_train.to_numpy()\n","y_test = y_test.to_numpy()\n","y_valid = y_valid.to_numpy()\n","\n","num_classes = y_train.shape[1]"]},{"cell_type":"markdown","metadata":{"id":"s_rqbtu6hi26"},"source":["#Analysis of Data\n","\n","\n","*   Balance or Imbalance\n","*   Sample length distribution\n","\n","\n","*   Visualize data for better understanding\n","\n","\n","\n","\n"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":332},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1681110576507,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"},"user_tz":-210},"id":"ZqXbhb8LbJ6-","outputId":"5433e1d1-8690-47b2-b01d-12a9733be0de"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  cat   count\n","0      مقایسه با رقبا  2847.0\n","1  پیشنهاد نرم‌افزاری  4751.0\n","2   درخواست بروزرسانی  1983.0\n","3           اشکال فنی  8379.0\n","4     اعتراض به خدمات  1208.0\n","5    درخواست راهنمایی  3547.0\n","6      اعتراض به قیمت  5796.0\n","7      مشکل در پرداخت   240.0\n","8  حجم زیاد نرم‌افزار   522.0"],"text/html":["\n","  <div id=\"df-b8f2f61e-59fa-46f7-a49e-9724550ed372\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cat</th>\n","      <th>count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>مقایسه با رقبا</td>\n","      <td>2847.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>پیشنهاد نرم‌افزاری</td>\n","      <td>4751.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>درخواست بروزرسانی</td>\n","      <td>1983.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>اشکال فنی</td>\n","      <td>8379.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>اعتراض به خدمات</td>\n","      <td>1208.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>درخواست راهنمایی</td>\n","      <td>3547.0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>اعتراض به قیمت</td>\n","      <td>5796.0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>مشکل در پرداخت</td>\n","      <td>240.0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>حجم زیاد نرم‌افزار</td>\n","      <td>522.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b8f2f61e-59fa-46f7-a49e-9724550ed372')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b8f2f61e-59fa-46f7-a49e-9724550ed372 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b8f2f61e-59fa-46f7-a49e-9724550ed372');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}],"source":["most_common_cat = pd.DataFrame()\n","most_common_cat['cat'] = df.columns[2:]\n","most_common_cat['count'] = df.iloc[:,2:].sum().values\n","most_common_cat.head(9)"]},{"cell_type":"code","source":["most_common_cat['class_weight'] = len(most_common_cat) / most_common_cat['count']\n","most_common_cat"],"metadata":{"id":"DQmjg794uM3S","colab":{"base_uri":"https://localhost:8080/","height":332},"executionInfo":{"status":"ok","timestamp":1681110593750,"user_tz":-210,"elapsed":484,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"}},"outputId":"66ebd260-4180-4323-ea7c-9c069445c85f"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  cat   count  class_weight\n","0      مقایسه با رقبا  2847.0      0.003161\n","1  پیشنهاد نرم‌افزاری  4751.0      0.001894\n","2   درخواست بروزرسانی  1983.0      0.004539\n","3           اشکال فنی  8379.0      0.001074\n","4     اعتراض به خدمات  1208.0      0.007450\n","5    درخواست راهنمایی  3547.0      0.002537\n","6      اعتراض به قیمت  5796.0      0.001553\n","7      مشکل در پرداخت   240.0      0.037500\n","8  حجم زیاد نرم‌افزار   522.0      0.017241"],"text/html":["\n","  <div id=\"df-3a447dcc-7022-4f6d-b8ce-4df2f9ff1462\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cat</th>\n","      <th>count</th>\n","      <th>class_weight</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>مقایسه با رقبا</td>\n","      <td>2847.0</td>\n","      <td>0.003161</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>پیشنهاد نرم‌افزاری</td>\n","      <td>4751.0</td>\n","      <td>0.001894</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>درخواست بروزرسانی</td>\n","      <td>1983.0</td>\n","      <td>0.004539</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>اشکال فنی</td>\n","      <td>8379.0</td>\n","      <td>0.001074</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>اعتراض به خدمات</td>\n","      <td>1208.0</td>\n","      <td>0.007450</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>درخواست راهنمایی</td>\n","      <td>3547.0</td>\n","      <td>0.002537</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>اعتراض به قیمت</td>\n","      <td>5796.0</td>\n","      <td>0.001553</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>مشکل در پرداخت</td>\n","      <td>240.0</td>\n","      <td>0.037500</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>حجم زیاد نرم‌افزار</td>\n","      <td>522.0</td>\n","      <td>0.017241</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3a447dcc-7022-4f6d-b8ce-4df2f9ff1462')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3a447dcc-7022-4f6d-b8ce-4df2f9ff1462 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3a447dcc-7022-4f6d-b8ce-4df2f9ff1462');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":12}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6PG0Vy5uamCZ"},"outputs":[],"source":["def plot_balanced_data(y ,subject = \"\") :\n","    pos_length = np.sum(y ,axis = 0)\n","    # Set plot's settings\n","    plotfa.set_font('B Yekan')  # It defaults to B Yekan already\n","    plotfa.prettify()  # To make our plots look better\n","    fig , ax = plt.subplots(figsize = (15 ,5))\n","    ax.barh(categories,pos_length , color = 'red')\n","    ax.tick_params(colors='white', which='both') \n","    ax.set_yticklabels(list(map(plotfa.fa ,categories)) ,color = 'white')\n","    ax.set_ylabel( plotfa.fa('اسم طبقه بند') ,color = 'white')\n","    ax.set_xlabel(plotfa.fa('تعداد') ,color = 'white')\n","    ax.set_title(plotfa.fa('  بررسی متوازن بودن دیتا '+subject) ,color = 'white')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":1521,"status":"ok","timestamp":1679694985614,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"},"user_tz":-210},"id":"2xSErDOo0Jv8","outputId":"d884131a-025d-4d0b-844f-89c61a445bc4"},"outputs":[{"name":"stderr","output_type":"stream","text":["WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plot_balanced_data(y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":1257,"status":"ok","timestamp":1679694990759,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"},"user_tz":-210},"id":"pNPLaBWcbWfR","outputId":"3a5c673b-698c-49bb-c71e-68ac75d0a57c"},"outputs":[{"name":"stderr","output_type":"stream","text":["WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'B Yekan' not found.\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plot_balanced_data(y_test ,'تست' )"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x309d74kd-tO"},"outputs":[],"source":["def get_num_words_per_sample(sample_comments):\n","    \"\"\"Returns the median number of words per sample given corpus.\"\"\"\n","\n","\n","    num_words = sample_comments.apply(lambda comment:len(word_tokenize(comment)))\n","    return np.mean(num_words)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1126,"status":"ok","timestamp":1680084290873,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"},"user_tz":-210},"id":"HlAjm9f-esRa","outputId":"299265d1-ef5a-4925-8c0a-55602727d67e"},"outputs":[{"output_type":"stream","name":"stdout","text":["The median number of words per sample :\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["14.119172669067627"]},"metadata":{},"execution_count":17}],"source":["print(\"The median number of words per sample :\\n\")\n","get_num_words_per_sample(df[\"normalized_comments\"])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"elapsed":909,"status":"ok","timestamp":1680084291780,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"},"user_tz":-210},"id":"T_oiRLwzhbIb","outputId":"5df2ac04-e71f-4213-cb58-cc3e4cb65ccf"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"dark"}}],"source":["def plot_sample_length_distribution(sample_texts):\n","    \"\"\"Plots the sample length distribution.\"\"\"\n","    \n","    plt.hist([len(s) for s in sample_texts], 50)\n","    plt.tick_params(colors='white', which='both') \n","    plt.xlabel('Length of a sample' ,color  ='white')\n","    plt.ylabel('Number of samples' ,color = 'white')\n","    plt.title('Sample length distribution' ,color  = 'white')\n","    plt.show()\n","\n","plot_sample_length_distribution(df['normalized_comments'])"]},{"cell_type":"markdown","metadata":{"id":"oe07XHVXjFVI"},"source":["# Report Utility"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"s8iB4eyFjMfN"},"outputs":[],"source":["def report_baseline_model(result) :\n","  for label in categories :\n","    print(label)\n","    print(result[label+'_train_accuracy'])\n","    print(result[label+'_test_accuracy'])\n","    print(result[label+'_test_report'])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VBUPv0G_jO1y"},"outputs":[],"source":["def plot_baseline_model_confusion_matrix(result) :\n","  fig ,axes = plt.subplots(3 ,3 ,figsize = (12 ,12))\n","  label_count = 0\n","  for i in range(3) :\n","    for j in range(3) : \n","      cm = confusion_matrix(test[categories[label_count]], result[ categories[label_count] +'_predicted'] ,normalize = 'true') \n","      title = plotfa.fa(categories[label_count])\n","      axes[i ,j].set_title(title,fontsize=10 ,color = 'white')\n","      axes[i ,j].tick_params(axis='x', colors='yellow')    #setting up X-axis tick color to red\n","      axes[i ,j].tick_params(axis='y', colors='yellow')  #setting up Y-axis tick color to black\n","\n","      sns.heatmap(cm, annot=True, fmt='.1f', xticklabels=[0 ,1], yticklabels=[0 ,1] ,ax=axes[i,j])\n","      label_count+=1"]},{"cell_type":"markdown","metadata":{"id":"EazcIwx4yXc-"},"source":["##`` Split Data for Baseline Model``"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"deNNhyiHyRYC"},"outputs":[],"source":["train, test = train_test_split(df, random_state=42, test_size=0.2, shuffle=True)\n","\n","X_train = train.normalized_comments\n","X_test = test.normalized_comments\n","print(X_train.shape)\n","print(X_test.shape)"]},{"cell_type":"markdown","metadata":{"id":"6l7F2AGD1prC"},"source":["# AutoKeras Baseline"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vgMfjPjG3dbb"},"outputs":[],"source":["X_train_auto, X_test_auto, y_train_auto, y_test_auto = train_test_split(df.normalized_comments, \n","                                                    df[df.columns[2:]], \n","                                                    test_size=0.2, \n","                                                    random_state=42, \n","                                                    shuffle=True)\n","X_test_auto, X_valid_auto, y_test_auto, y_valid_auto = train_test_split(X_test_auto, \n","                                                    y_test_auto, \n","                                                    test_size=0.5, \n","                                                    random_state=42, \n","                                                    shuffle=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gDCXCcE331cS"},"outputs":[],"source":["X_train_auto = np.array(X_train_auto.tolist())\n","X_test = np.array(X_test_auto.tolist())\n","X_valid_auto = np.array(X_valid_auto.tolist())"]},{"cell_type":"code","source":["max_tokens = 5000\n","\n","num_classes = 9\n","\n","input_node = ak.TextInput()\n","output_node = ak.TextToIntSequence()(input_node)\n","output_node = ak.Embedding()(output_node)\n","\n","output_node = ak.ConvBlock(separable=True)(output_node)\n","output_node = ak.ClassificationHead(\n","        num_classes=num_classes, \n","        loss='binary_crossentropy', \n","        metrics=[\n","            'accuracy', \n","            tf.keras.metrics.Precision(), \n","            tf.keras.metrics.Recall(), \n","            tf.keras.metrics.AUC(name='auc'), \n","            tfa.metrics.F1Score(num_classes=num_classes, average='macro')])(output_node)\n","\n","\n","model = ak.AutoModel(\n","    inputs=input_node,\n","    outputs=output_node,\n","    objective='val_loss',\n","    tuner='bayesian',\n","    max_trials=100,\n","    overwrite=True\n",")\n","\n","model.fit(X_train_auto, y_train_auto.to_numpy(), batch_size=16, epochs=3, validation_data=(X_valid_auto, y_valid_auto.to_numpy()) , class_weight = dict(most_common_cat['class_weight']))\n"],"metadata":{"id":"U_rDKvE77MBT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9HvEI3UmlO4U"},"source":["# Baseline Model LogisticRegression"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"R-Q-iMLf4Eft"},"outputs":[],"source":["vect = TfidfVectorizer(max_features=900,ngram_range=(1 ,3))\n","\n","train_xd = vect.fit_transform(X_train)\n","test_xd = vect.transform(X_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Uii4f2hjFiSW"},"outputs":[],"source":["logreg = LogisticRegression(C=12)\n","result = dict()\n","for label in categories:\n","    print('... Processing {}'.format(label))\n","    y = train[label]\n","    # train the model using X_dtm & y\n","    logreg.fit(train_xd, y)\n","    # compute the training accuracy\n","    y_pred_X = logreg.predict(train_xd)\n","\n","    y_pred_t= logreg.predict(test_xd)\n","\n","    result[label+'_train_accuracy'] = accuracy_score(y, y_pred_X)\n","    result[label+'_test_accuracy'] = accuracy_score(test[label], y_pred_t)\n","    result[label+'_test_report'] = classification_report(test[label], y_pred_t)\n","    result[label+'_predicted'] = y_pred_t"]},{"cell_type":"markdown","metadata":{"id":"SsReRlg1kFh1"},"source":["# Logistic Regression Report"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1678738470068,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"},"user_tz":-210},"id":"OcR2RsiyP2W6","outputId":"df8691f7-ae03-49dc-fe48-70a014eb87d9"},"outputs":[{"name":"stdout","output_type":"stream","text":["مقایسه با رقبا\n","0.9837514638320872\n","0.9834256631986669\n","              precision    recall  f1-score   support\n","\n","         0.0       0.99      1.00      0.99     21634\n","         1.0       0.78      0.49      0.60       569\n","\n","    accuracy                           0.98     22203\n","   macro avg       0.88      0.75      0.80     22203\n","weighted avg       0.98      0.98      0.98     22203\n","\n","پیشنهاد نرم‌افزاری\n","0.9685050896315647\n","0.9645093005449714\n","              precision    recall  f1-score   support\n","\n","         0.0       0.97      0.99      0.98     21196\n","         1.0       0.66      0.45      0.53      1007\n","\n","    accuracy                           0.96     22203\n","   macro avg       0.82      0.72      0.76     22203\n","weighted avg       0.96      0.96      0.96     22203\n","\n","درخواست بروزرسانی\n","0.9865214845509414\n","0.9853623384227357\n","              precision    recall  f1-score   support\n","\n","         0.0       0.99      1.00      0.99     21810\n","         1.0       0.66      0.36      0.46       393\n","\n","    accuracy                           0.99     22203\n","   macro avg       0.82      0.68      0.73     22203\n","weighted avg       0.98      0.99      0.98     22203\n","\n","اشکال فنی\n","0.959395549950455\n","0.9559969373508085\n","              precision    recall  f1-score   support\n","\n","         0.0       0.97      0.98      0.98     20594\n","         1.0       0.73      0.62      0.67      1609\n","\n","    accuracy                           0.96     22203\n","   macro avg       0.85      0.80      0.82     22203\n","weighted avg       0.95      0.96      0.95     22203\n","\n","اعتراض به خدمات\n","0.9918588415458067\n","0.9910822861775436\n","              precision    recall  f1-score   support\n","\n","         0.0       0.99      1.00      1.00     21961\n","         1.0       0.72      0.30      0.42       242\n","\n","    accuracy                           0.99     22203\n","   macro avg       0.86      0.65      0.71     22203\n","weighted avg       0.99      0.99      0.99     22203\n","\n","درخواست راهنمایی\n","0.9787519142419602\n","0.9779309102373553\n","              precision    recall  f1-score   support\n","\n","         0.0       0.98      0.99      0.99     21484\n","         1.0       0.72      0.51      0.60       719\n","\n","    accuracy                           0.98     22203\n","   macro avg       0.85      0.75      0.80     22203\n","weighted avg       0.98      0.98      0.98     22203\n","\n","اعتراض به قیمت\n","0.9839203675344563\n","0.9809485204702068\n","              precision    recall  f1-score   support\n","\n","         0.0       0.99      0.99      0.99     21059\n","         1.0       0.86      0.75      0.80      1144\n","\n","    accuracy                           0.98     22203\n","   macro avg       0.93      0.87      0.90     22203\n","weighted avg       0.98      0.98      0.98     22203\n","\n","مشکل در پرداخت\n","0.9988289343302406\n","0.9984236364455253\n","              precision    recall  f1-score   support\n","\n","         0.0       1.00      1.00      1.00     22158\n","         1.0       0.66      0.47      0.55        45\n","\n","    accuracy                           1.00     22203\n","   macro avg       0.83      0.73      0.77     22203\n","weighted avg       1.00      1.00      1.00     22203\n","\n","حجم زیاد نرم‌افزار\n","0.9957661471939465\n","0.9945502859973877\n","              precision    recall  f1-score   support\n","\n","         0.0       1.00      1.00      1.00     22083\n","         1.0       0.48      0.12      0.19       120\n","\n","    accuracy                           0.99     22203\n","   macro avg       0.74      0.56      0.59     22203\n","weighted avg       0.99      0.99      0.99     22203\n","\n"]}],"source":["report_baseline_model(result)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":746},"executionInfo":{"elapsed":2830,"status":"ok","timestamp":1678738472892,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"},"user_tz":-210},"id":"y3OytExSiwbJ","outputId":"14c05143-7dd0-4632-cb7d-ea598a9b6e14"},"outputs":[{"name":"stderr","output_type":"stream","text":["WARNING:matplotlib.font_manager:findfont: Font family ['B Yekan'] not found. Falling back to DejaVu Sans.\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 864x864 with 18 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plot_baseline_model_confusion_matrix(result)"]},{"cell_type":"markdown","metadata":{"id":"nOnkuyIBHwly"},"source":["# **Modified Cross-Entropy loss for multi-label classification and handling imbalanced data**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"B6t9hFt2oYA1"},"outputs":[],"source":["def compute_class_weights(y):\n","    class_weights =  tf.reduce_sum(tf.ones_like(y), axis=0) / tf.reduce_sum(y, axis=0)\n","    class_weights = class_weights / (K.max(class_weights) + K.epsilon())  # add epsilon\n","\n","    return tf.cast(class_weights, tf.float32)\n","\n","\n","weights = compute_class_weights(y_train)\n","\n","def weighted_binary_crossentropy(class_weights):\n","    def loss(y_true, y_pred):\n","        # Apply class weights to the binary cross-entropy loss for each label\n","        losses = tf.nn.sigmoid_cross_entropy_with_logits(labels=y_true, logits=y_pred)\n","        weighted_losses = tf.reduce_mean(class_weights * losses, axis=0)\n","\n","        # Return the mean of the weighted losses\n","        return tf.reduce_mean(weighted_losses)\n","    return loss"]},{"cell_type":"markdown","metadata":{"id":"WXwmRIa35PQQ"},"source":["This custom loss function calculates the class weights based on the proportion of positive examples in each label, and applies them to the binary crossentropy loss for each label. The class weights are normalized to have a maximum of 1, to avoid amplifying the impact of the weights too much."]},{"cell_type":"markdown","source":["#****************NOTE ************: \n","Use one of the following options for Handling Imbalance Data \n","\n","*   Custom Loss ( weighted_binary_crossentropy )\n","\n","*   class_weight in model.fit()\n","\n"],"metadata":{"id":"vRYOAER6vb-l"}},{"cell_type":"markdown","metadata":{"id":"P7QNhPmKISk1"},"source":["# **F1_Score metric**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6N3LLRY3IRs1"},"outputs":[],"source":["def f1_score(y_true, y_logit):\n","\n","    true_positives = K.sum(K.round(K.clip(y_true * y_logit, 0, 1)))\n","    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n","    recall = true_positives / (possible_positives + K.epsilon())\n","    predicted_positives = K.sum(K.round(K.clip(y_logit, 0, 1)))\n","    precision = true_positives / (predicted_positives + K.epsilon())\n","    return (2 * precision * recall) / (precision + recall + K.epsilon())"]},{"cell_type":"markdown","metadata":{"id":"x9BEqasNk2ZW"},"source":["# **Transformer Models**\n","\n","\n","\n","*   MLPModel\n","\n","*   SepCNNModel\n","\n","*   RNN_CNN_Model\n","*   BertModel\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HEnqwCbhVLrN"},"outputs":[],"source":["class MLPModel(tf.keras.Model):\n","    def __init__(self ,bert_layer , layers, units, dropout_rate, num_classes, input_shape):\n","        super(MLPModel, self).__init__()\n","\n","        self.bert_layer = bert_layer\n","        self.dropout_layers = []\n","        self.dense_layers = []\n","        for i in range(layers):\n","            self.dropout_layers.append(tf.keras.layers.Dropout(rate=dropout_rate))\n","            self.dense_layers.append(tf.keras.layers.Dense(units=units, activation=\"relu\" ,kernel_regularizer=regularizers.l2(0.01)))\n","        self.output_layer = tf.keras.layers.Dense(units=num_classes, activation=\"sigmoid\")\n","        self.pool_layer = tf.keras.layers.GlobalMaxPool1D()\n","\n","    def call(self, inputs, **kwargs):\n","        input_ids, attention_mask = inputs['input_ids'] ,inputs['attention_mask']\n","        bert_output = self.bert_layer(input_ids, attention_mask=attention_mask)[0]\n","        out = self.pool_layer(bert_output)\n","        for dropout_layer, dense_layer in zip(self.dropout_layers, self.dense_layers):\n","            out = dense_layer(out)\n","            out = dropout_layer(out)\n","        out = self.output_layer(out)\n","        return out\n","\n","    def freeze_bert_layers(self):\n","        self.bert_layer.trainable = False\n","\n","    def unfreeze_bert_layers(self):\n","        self.bert_layer.trainable = True\n","\n"]},{"cell_type":"code","source":["class SepCNNModel(tf.keras.Model):\n","    \n","    def __init__(self, bert ,config,blocks, filters, kernel_size, \n","                 pool_size, num_classes  ,trainable = False):\n","        \n","        super(SepCNNModel, self).__init__()\n","        \n","        self.blocks = blocks\n","        self.filters = filters\n","        self.kernel_size = kernel_size\n","        self.pool_size = pool_size\n","        self.num_classes = num_classes\n","        self.trainable = trainable\n","        self.bert_layer = bert\n","        self.block_layers = []\n","        self.sep_cnn_layers = []\n","\n","        for i in range(self.blocks):\n","            self.block_layers.append(tf.keras.layers.Dropout(config.hidden_dropout_prob))\n","            self.block_layers.append(tf.keras.layers.SeparableConv1D(filters=self.filters, \n","                                                               kernel_size=self.kernel_size, \n","                                                               activation='relu', \n","                                                               bias_initializer='random_uniform', \n","                                                               depthwise_initializer='random_uniform', \n","                                                               padding='same'))\n","            self.block_layers.append(tf.keras.layers.SeparableConv1D(filters=self.filters, \n","                                                               kernel_size=self.kernel_size, \n","                                                               activation='relu', \n","                                                               bias_initializer='random_uniform', \n","                                                               depthwise_initializer='random_uniform', \n","                                                               padding='same'))\n","            self.block_layers.append(tf.keras.layers.MaxPooling1D(pool_size=self.pool_size))\n","            \n","        self.sep_cnn_layers.append(tf.keras.layers.SeparableConv1D(filters=self.filters * 2, \n","                                                           kernel_size=self.kernel_size, \n","                                                           activation='relu', \n","                                                           bias_initializer='random_uniform', \n","                                                           depthwise_initializer='random_uniform', \n","                                                           padding='same'))\n","        self.sep_cnn_layers.append(tf.keras.layers.SeparableConv1D(filters=self.filters * 2, \n","                                                           kernel_size=self.kernel_size, \n","                                                           activation='relu', \n","                                                           bias_initializer='random_uniform', \n","                                                           depthwise_initializer='random_uniform', \n","                                                           padding='same'))\n","        \n","        self.global_pooling_layer = tf.keras.layers.GlobalAveragePooling1D()\n","        self.dropout_layer = tf.keras.layers.Dropout(config.hidden_dropout_prob)\n","        self.dense_layer = tf.keras.layers.Dense(config.num_labels, activation='sigmoid')\n","        \n","    def call(self, inputs):\n","        input_ids, attention_mask = inputs['input_ids'] ,inputs['attention_mask']\n","\n","        # Define the forward pass of the model\n","\n","        x = self.bert_layer(input_ids, attention_mask=attention_mask)[0]\n","        for layer in self.block_layers:\n","            x = layer(x)\n","        for layer in self.sep_cnn_layers :\n","            x = layer(x)\n","\n","        x = self.global_pooling_layer(x)\n","        x = self.dropout_layer(x)\n","\n","        x = self.dense_layer(x)\n","\n","        self.bert_layer.trainable = self.trainable\n","\n","        return x\n","\n","\n","    def freeze_bert_layers(self):\n","        self.bert_layer.trainable = False\n","\n","    def unfreeze_bert_layers(self):\n","        self.bert_layer.trainable = True"],"metadata":{"id":"OnRqf_90nw3y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class RNN_CNN_Model(tf.keras.Model):\n","    def __init__(self, bert_layer ,conv_layers_num ,rnn_layers_num ,dense_layers_num ,rnn_units ,dense_units,filters , dropout_rate, num_classes):\n","        super(RNN_CNN_Model, self).__init__()\n","        self.bert_layer = bert_layer\n","        self.reshape_layer = tf.keras.layers.Reshape((1, -1))\n","        self.num_classes = num_classes\n","        self.rnn_layers = []\n","        self.conv_layers = []\n","        self.dropout_layers = []\n","        self.dense_layers = []\n","        self.pool_layer = tf.keras.layers.GlobalMaxPooling1D()\n","        # Define the layers of the model\n","\n","        for i in range(rnn_layers_num):\n","            self.rnn_layers.append( tf.keras.layers.LSTM(rnn_units, return_sequences=True) )\n","\n","        for i in range(conv_layers_num):\n","            self.conv_layers.append(tf.keras.layers.Conv1D( filters=filters, kernel_size=3, padding='same', activation='relu'))        \n","        \n","        for i in range(dense_layers_num):\n","            self.dropout_layers.append(tf.keras.layers.Dropout(rate=dropout_rate))\n","            self.dense_layers.append(tf.keras.layers.Dense(units=dense_units, activation=\"relu\" ,kernel_regularizer=regularizers.l2(0.01)))\n","\n","\n","        self.output_layer = tf.keras.layers.Dense(self.num_classes, activation='sigmoid')\n","    \n","    def call(self, inputs):\n","        input_ids, attention_mask = inputs['input_ids'] ,inputs['attention_mask']\n","\n","        # Define the forward pass of the model\n","\n","        x = self.bert_layer(input_ids, attention_mask=attention_mask)[1]\n","        x = self.reshape_layer(x)\n","        for rnn_layer in self.rnn_layers :\n","          x = rnn_layer(x)\n","\n","        for conv_layer in self.conv_layers :\n","          x = conv_layer(x)\n","          \n","        x = self.pool_layer(x)\n","        for dropout_layer, dense_layer in zip(self.dropout_layers, self.dense_layers):\n","            x = dense_layer(x)\n","            x = dropout_layer(x)\n","\n","\n","        output = self.output_layer(x)\n","        return output\n","\n","\n","\n","    def freeze_bert_layers(self):\n","        self.bert_layer.trainable = False\n","\n","    def unfreeze_bert_layers(self):\n","        self.bert_layer.trainable = True\n"],"metadata":{"id":"BShdhRusP3ni"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class BertModel(tf.keras.Model):\n","\n","    def __init__(self, bert,config ,dense_layers_num = 0):\n","        super(BertModel, self).__init__()\n","\n","        self.bert_layer = bert\n","        self.dropout = tf.keras.layers.Dropout(config.hidden_dropout_prob)\n","        self.classifier = tf.keras.layers.Dense( config.num_labels, activation='sigmoid')\n","        self.dropout_layers = []\n","        self.dense_layers = []\n","\n","        for i in range(dense_layers_num):\n","          self.dropout_layers.append(tf.keras.layers.Dropout(rate = config.hidden_dropout_prob))\n","          self.dense_layers.append(tf.keras.layers.Dense(units=100, activation=\"relu\" ,kernel_regularizer=regularizers.l2(0.01)))\n","    def call(self, inputs):\n","        input_ids, attention_mask = inputs['input_ids'] ,inputs['attention_mask']\n","\n","        x = self.bert_layer(input_ids, attention_mask=attention_mask)\n","        x = self.dropout(x['pooler_output'])\n","        for dropout_layer, dense_layer in zip(self.dropout_layers, self.dense_layers):\n","            x = dense_layer(x)\n","            x = dropout_layer(x)\n","        logits = self.classifier(x)\n","        return logits \n","\n","\n","    def freeze_bert_layers(self):\n","        self.bert_layer.trainable = False\n","\n","    def unfreeze_bert_layers(self):\n","        self.bert_layer.trainable = True"],"metadata":{"id":"S2mIf94gEzku"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# ***Training Phase    (Using Checkpointing for resuming train)***"],"metadata":{"id":"DR07JOsNxT9j"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"QiFb5LQqSJVP"},"outputs":[],"source":["import os\n","import tensorflow as tf\n","\n","checkpoint_path = \"/content/drive/MyDrive/Roshan_Internship1401/nlp/models\"\n","\n","def train_model_with_checkpointing(model ,model_name, X_train_v ,y_train, X_valid_v,y_valid , epochs, batch_size = 32 ,learning_rate = 5e-05):\n","\n","    dir_path = os.path.join(checkpoint_path,model_name ,\"checkpoint\")\n","    if not os.path.exists(dir_path):\n","        os.makedirs(dir_path ,exist_ok=True)\n","\n","    # Compile the model\n","    optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate ,  epsilon=1e-08, clipnorm=1.0)\n","    model.compile(optimizer=optimizer, loss=tf.keras.losses.BinaryCrossentropy() , metrics=['accuracy' ,tf.keras.metrics.Recall() ,tf.keras.metrics.Precision() ,f1_score])\n","\n","    # Define the checkpoint directory and filename\n","    checkpoint_prefix = os.path.join(dir_path, \"ckpt_{epoch}\")\n","\n","    # Define the callback to save the checkpoints\n","    checkpoint_callback=tf.keras.callbacks.ModelCheckpoint(\n","        filepath=checkpoint_prefix,\n","        save_best_only=True,\n","        mode='max',\n","        save_weights_only=True,\n","        monitor = 'val_f1_score')\n","    \n","    callbacks = [\n","          ReduceLROnPlateau(monitor='val_loss' ,patience = 3),\n","          tf.keras.callbacks.EarlyStopping(\n","          monitor='val_loss', patience=8), \n","          checkpoint_callback\n","         ]\n","\n","    # Train the model with the checkpoint callback\n","    history = model.fit(\n","            {'input_ids':X_train_v['input_ids'],'attention_mask':X_train_v['attention_mask']} ,\n","            y_train,\n","            class_weight = dict(most_common_cat['class_weight']),\n","            batch_size = batch_size ,\n","            epochs=epochs,\n","            callbacks=callbacks,\n","            validation_data=({'input_ids':X_valid_v['input_ids'],'attention_mask':X_valid_v['attention_mask']} ,y_valid))\n","\n","\n","    return history\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7C_p9i45UAHp"},"outputs":[],"source":["checkpoint_path = \"/content/drive/MyDrive/Roshan_Internship1401/nlp/models\"\n","\n","def resume_training_with_checkpointing(model ,model_name, X_train_v ,y_train, X_valid_v,y_valid , epochs, batch_size =32 ,learning_rate = 5e-05):\n","\n","    dir_path = os.path.join(checkpoint_path,model_name ,\"checkpoint\")\n","\n","    optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate ,  epsilon=1e-08, clipnorm=1.0)\n","    model.compile(optimizer=optimizer, loss=tf.keras.losses.BinaryCrossentropy() , metrics=[tf.keras.metrics.Recall() ,tf.keras.metrics.Precision() ,f1_score])\n","\n","    # Load the latest checkpoint weights\n","    latest_checkpoint = tf.train.latest_checkpoint(dir_path)\n","    model.load_weights(latest_checkpoint)\n","\n","    # Get the last completed epoch from the checkpoint filename\n","    last_epoch = int(latest_checkpoint.split(\"_\")[-1])\n","\n","    # Define the checkpoint directory and filename\n","    checkpoint_prefix = os.path.join(dir_path, \"ckpt_{epoch}\")\n","\n","    # Define the callback to save the checkpoints\n","    checkpoint_callback=tf.keras.callbacks.ModelCheckpoint(\n","        filepath=checkpoint_prefix,\n","        save_weights_only=True,\n","        save_freq='epoch')\n","    \n","    callbacks = [\n","          ReduceLROnPlateau(monitor='val_loss' ,patience = 2),\n","          tf.keras.callbacks.EarlyStopping(\n","          monitor='val_loss', patience=5), \n","          checkpoint_callback\n","         ]\n","\n","    # Train the model with the checkpoint callback\n","    \n","\n","    history = model.fit(\n","        {'input_ids':X_train_v['input_ids'],'attention_mask':X_train_v['attention_mask']} ,\n","        y_train,\n","        class_weight = dict(most_common_cat['class_weight']),\n","        batch_size = batch_size ,\n","        epochs=epochs,\n","        initial_epoch=last_epoch,\n","        callbacks=callbacks,\n","        validation_data=({'input_ids':X_valid_v['input_ids'],'attention_mask':X_valid_v['attention_mask']} ,y_valid))\n","\n","    return history\n"]},{"cell_type":"markdown","source":["## **Train BertModel**"],"metadata":{"id":"TAeo8KnofEQN"}},{"cell_type":"code","source":["model_name = 'BertModel'\n","\n","model = BertModel(bert, config=config)\n","model.unfreeze_bert_layers()\n","\n","history = train_model_with_checkpointing(model,model_name, X_train_v ,y_train, X_valid_v,y_valid, epochs = 15, batch_size = 32 ,learning_rate = 5e-05)"],"metadata":{"id":"vrckW5iW-4F7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680086038491,"user_tz":-210,"elapsed":1244980,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"}},"outputId":"b2b0ed7b-d479-46b9-8622-fc69cfa464c3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/15\n","1000/1000 [==============================] - 192s 143ms/step - loss: 3.2215e-04 - accuracy: 0.5777 - recall_1: 0.5816 - precision_1: 0.7892 - f1_score: 0.6450 - val_loss: 0.0917 - val_accuracy: 0.5966 - val_recall_1: 0.6881 - val_precision_1: 0.8280 - val_f1_score: 0.7475 - lr: 5.0000e-05\n","Epoch 2/15\n","1000/1000 [==============================] - 118s 118ms/step - loss: 1.8691e-04 - accuracy: 0.6528 - recall_1: 0.7627 - precision_1: 0.8459 - f1_score: 0.8000 - val_loss: 0.0837 - val_accuracy: 0.6367 - val_recall_1: 0.7335 - val_precision_1: 0.8274 - val_f1_score: 0.7740 - lr: 5.0000e-05\n","Epoch 3/15\n","1000/1000 [==============================] - 118s 118ms/step - loss: 1.4903e-04 - accuracy: 0.6638 - recall_1: 0.8063 - precision_1: 0.8747 - f1_score: 0.8371 - val_loss: 0.0991 - val_accuracy: 0.6132 - val_recall_1: 0.7535 - val_precision_1: 0.7980 - val_f1_score: 0.7728 - lr: 5.0000e-05\n","Epoch 4/15\n","1000/1000 [==============================] - 117s 117ms/step - loss: 1.2800e-04 - accuracy: 0.6655 - recall_1: 0.8375 - precision_1: 0.8978 - f1_score: 0.8647 - val_loss: 0.0866 - val_accuracy: 0.6177 - val_recall_1: 0.7719 - val_precision_1: 0.8377 - val_f1_score: 0.8004 - lr: 5.0000e-05\n","Epoch 5/15\n","1000/1000 [==============================] - 117s 117ms/step - loss: 9.0666e-05 - accuracy: 0.6775 - recall_1: 0.8766 - precision_1: 0.9273 - f1_score: 0.9000 - val_loss: 0.0920 - val_accuracy: 0.6189 - val_recall_1: 0.8172 - val_precision_1: 0.8006 - val_f1_score: 0.8062 - lr: 5.0000e-05\n","Epoch 6/15\n","1000/1000 [==============================] - 117s 117ms/step - loss: 5.1069e-05 - accuracy: 0.6873 - recall_1: 0.9308 - precision_1: 0.9613 - f1_score: 0.9453 - val_loss: 0.0887 - val_accuracy: 0.6382 - val_recall_1: 0.8145 - val_precision_1: 0.8256 - val_f1_score: 0.8170 - lr: 5.0000e-06\n","Epoch 7/15\n","1000/1000 [==============================] - 117s 117ms/step - loss: 3.7285e-05 - accuracy: 0.6920 - recall_1: 0.9484 - precision_1: 0.9741 - f1_score: 0.9607 - val_loss: 0.0962 - val_accuracy: 0.6362 - val_recall_1: 0.8172 - val_precision_1: 0.8187 - val_f1_score: 0.8147 - lr: 5.0000e-06\n","Epoch 8/15\n","1000/1000 [==============================] - 115s 115ms/step - loss: 2.9501e-05 - accuracy: 0.6938 - recall_1: 0.9583 - precision_1: 0.9807 - f1_score: 0.9691 - val_loss: 0.1006 - val_accuracy: 0.6367 - val_recall_1: 0.8165 - val_precision_1: 0.8217 - val_f1_score: 0.8161 - lr: 5.0000e-06\n","Epoch 9/15\n","1000/1000 [==============================] - 116s 116ms/step - loss: 2.2661e-05 - accuracy: 0.6944 - recall_1: 0.9679 - precision_1: 0.9869 - f1_score: 0.9771 - val_loss: 0.1015 - val_accuracy: 0.6364 - val_recall_1: 0.8162 - val_precision_1: 0.8202 - val_f1_score: 0.8149 - lr: 5.0000e-07\n","Epoch 10/15\n","1000/1000 [==============================] - 116s 116ms/step - loss: 2.1599e-05 - accuracy: 0.6945 - recall_1: 0.9703 - precision_1: 0.9871 - f1_score: 0.9784 - val_loss: 0.1024 - val_accuracy: 0.6369 - val_recall_1: 0.8100 - val_precision_1: 0.8245 - val_f1_score: 0.8139 - lr: 5.0000e-07\n"]}]},{"cell_type":"code","source":["model.save(os.path.join(checkpoint_path,model_name) ,save_format='tf')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xgff9a9q8Il1","executionInfo":{"status":"ok","timestamp":1680086585686,"user_tz":-210,"elapsed":59743,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"}},"outputId":"e84e3813-d968-498e-d357-6fa07c9f07b3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:Found untraced functions such as embeddings_layer_call_fn, embeddings_layer_call_and_return_conditional_losses, encoder_layer_call_fn, encoder_layer_call_and_return_conditional_losses, pooler_layer_call_fn while saving (showing 5 of 420). These functions will not be directly callable after loading.\n"]}]},{"cell_type":"markdown","source":["## **Train MLPModel_Unfreezed**"],"metadata":{"id":"BBt66D5dyYKG"}},{"cell_type":"code","source":["model_name = 'MLPModel_Unfreezed'\n","\n","modelMLP_unfreezed = MLPModel(bert, layers = 1, units = 84, dropout_rate = 0.4, num_classes = num_classes, input_shape =  (MAX_SEQUENCE_LENGTH,))\n","modelMLP_unfreezed.unfreeze_bert_layers()\n","\n","history = train_model_with_checkpointing(modelMLP_unfreezed,model_name, X_train_v ,y_train, X_valid_v,y_valid, epochs = 20, batch_size = 32 ,learning_rate = 5e-05)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h-GgFSyRDAWc","executionInfo":{"status":"ok","timestamp":1680091683878,"user_tz":-210,"elapsed":1198020,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"}},"outputId":"df7c299a-dc5c-4577-fa59-746a3c0d1e53"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Gradients do not exist for variables ['tf_bert_model/bert/pooler/dense/kernel:0', 'tf_bert_model/bert/pooler/dense/bias:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss` argument?\n","WARNING:tensorflow:Gradients do not exist for variables ['tf_bert_model/bert/pooler/dense/kernel:0', 'tf_bert_model/bert/pooler/dense/bias:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss` argument?\n","WARNING:tensorflow:Gradients do not exist for variables ['tf_bert_model/bert/pooler/dense/kernel:0', 'tf_bert_model/bert/pooler/dense/bias:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss` argument?\n","WARNING:tensorflow:Gradients do not exist for variables ['tf_bert_model/bert/pooler/dense/kernel:0', 'tf_bert_model/bert/pooler/dense/bias:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss` argument?\n"]},{"output_type":"stream","name":"stdout","text":["1000/1000 [==============================] - 183s 134ms/step - loss: 0.6858 - accuracy: 0.6673 - recall_5: 0.8684 - precision_5: 0.8542 - f1_score: 0.8674 - val_loss: 0.3146 - val_accuracy: 0.6109 - val_recall_5: 0.7996 - val_precision_5: 0.8091 - val_f1_score: 0.8015 - lr: 5.0000e-05\n","Epoch 2/20\n","1000/1000 [==============================] - 114s 114ms/step - loss: 0.0786 - accuracy: 0.6801 - recall_5: 0.8902 - precision_5: 0.9431 - f1_score: 0.9151 - val_loss: 0.2016 - val_accuracy: 0.6129 - val_recall_5: 0.7875 - val_precision_5: 0.8105 - val_f1_score: 0.7960 - lr: 5.0000e-05\n","Epoch 3/20\n","1000/1000 [==============================] - 114s 114ms/step - loss: 0.0042 - accuracy: 0.6859 - recall_5: 0.7563 - precision_5: 0.9718 - f1_score: 0.8470 - val_loss: 0.2981 - val_accuracy: 0.6022 - val_recall_5: 0.7947 - val_precision_5: 0.7866 - val_f1_score: 0.7885 - lr: 5.0000e-05\n","Epoch 4/20\n","1000/1000 [==============================] - 114s 114ms/step - loss: 4.1477e-04 - accuracy: 0.6960 - recall_5: 0.8042 - precision_5: 0.9709 - f1_score: 0.8783 - val_loss: 0.2669 - val_accuracy: 0.5814 - val_recall_5: 0.7352 - val_precision_5: 0.8422 - val_f1_score: 0.7819 - lr: 5.0000e-05\n","Epoch 5/20\n","1000/1000 [==============================] - 113s 113ms/step - loss: 3.0714e-04 - accuracy: 0.6939 - recall_5: 0.8523 - precision_5: 0.9659 - f1_score: 0.9046 - val_loss: 0.2384 - val_accuracy: 0.6699 - val_recall_5: 0.7518 - val_precision_5: 0.8290 - val_f1_score: 0.7846 - lr: 5.0000e-05\n","Epoch 6/20\n","1000/1000 [==============================] - 112s 112ms/step - loss: 2.5479e-04 - accuracy: 0.7003 - recall_5: 0.8995 - precision_5: 0.9812 - f1_score: 0.9383 - val_loss: 0.2319 - val_accuracy: 0.6202 - val_recall_5: 0.7601 - val_precision_5: 0.8407 - val_f1_score: 0.7951 - lr: 5.0000e-06\n","Epoch 7/20\n","1000/1000 [==============================] - 112s 112ms/step - loss: 2.4264e-04 - accuracy: 0.7056 - recall_5: 0.9109 - precision_5: 0.9882 - f1_score: 0.9478 - val_loss: 0.2315 - val_accuracy: 0.6022 - val_recall_5: 0.7670 - val_precision_5: 0.8365 - val_f1_score: 0.7967 - lr: 5.0000e-06\n","Epoch 8/20\n","1000/1000 [==============================] - 112s 112ms/step - loss: 2.3431e-04 - accuracy: 0.7059 - recall_5: 0.9160 - precision_5: 0.9912 - f1_score: 0.9522 - val_loss: 0.2237 - val_accuracy: 0.5899 - val_recall_5: 0.7525 - val_precision_5: 0.8453 - val_f1_score: 0.7925 - lr: 5.0000e-06\n","Epoch 9/20\n","1000/1000 [==============================] - 112s 112ms/step - loss: 2.2917e-04 - accuracy: 0.7048 - recall_5: 0.9207 - precision_5: 0.9930 - f1_score: 0.9556 - val_loss: 0.2248 - val_accuracy: 0.5919 - val_recall_5: 0.7577 - val_precision_5: 0.8390 - val_f1_score: 0.7928 - lr: 5.0000e-07\n","Epoch 10/20\n","1000/1000 [==============================] - 112s 112ms/step - loss: 2.2808e-04 - accuracy: 0.7042 - recall_5: 0.9228 - precision_5: 0.9930 - f1_score: 0.9569 - val_loss: 0.2240 - val_accuracy: 0.5934 - val_recall_5: 0.7584 - val_precision_5: 0.8382 - val_f1_score: 0.7926 - lr: 5.0000e-07\n"]}]},{"cell_type":"code","source":["model_name = 'MLPModel_Unfreezed'\n","\n","modelMLP_unfreezed = MLPModel(bert, layers = 1, units = 84, dropout_rate = 0.4, num_classes = num_classes, input_shape =  (MAX_SEQUENCE_LENGTH,))\n","modelMLP_unfreezed.unfreeze_bert_layers()\n","\n","history = train_model_with_checkpointing(modelMLP_unfreezed,model_name, X_train_v ,y_train, X_valid_v,y_valid, epochs = 20, batch_size = 32 ,learning_rate = 5e-05)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X0Ho-qwpk1o3","executionInfo":{"status":"ok","timestamp":1680098094596,"user_tz":-210,"elapsed":1197890,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"}},"outputId":"3521c404-03ab-49ab-b5d3-38d35af77d94"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Gradients do not exist for variables ['tf_bert_model/bert/pooler/dense/kernel:0', 'tf_bert_model/bert/pooler/dense/bias:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss` argument?\n","WARNING:tensorflow:Gradients do not exist for variables ['tf_bert_model/bert/pooler/dense/kernel:0', 'tf_bert_model/bert/pooler/dense/bias:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss` argument?\n","WARNING:tensorflow:Gradients do not exist for variables ['tf_bert_model/bert/pooler/dense/kernel:0', 'tf_bert_model/bert/pooler/dense/bias:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss` argument?\n","WARNING:tensorflow:Gradients do not exist for variables ['tf_bert_model/bert/pooler/dense/kernel:0', 'tf_bert_model/bert/pooler/dense/bias:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss` argument?\n"]},{"output_type":"stream","name":"stdout","text":["1000/1000 [==============================] - 181s 134ms/step - loss: 0.6790 - accuracy: 0.6952 - recall_16: 0.8946 - precision_16: 0.8499 - f1_score: 0.8829 - val_loss: 0.3404 - val_accuracy: 0.5706 - val_recall_16: 0.7816 - val_precision_16: 0.8027 - val_f1_score: 0.7896 - lr: 5.0000e-05\n","Epoch 2/20\n","1000/1000 [==============================] - 117s 117ms/step - loss: 0.0775 - accuracy: 0.7200 - recall_16: 0.9352 - precision_16: 0.9630 - f1_score: 0.9489 - val_loss: 0.1695 - val_accuracy: 0.5886 - val_recall_16: 0.8255 - val_precision_16: 0.7681 - val_f1_score: 0.7938 - lr: 5.0000e-05\n","Epoch 3/20\n","1000/1000 [==============================] - 113s 113ms/step - loss: 0.0041 - accuracy: 0.7110 - recall_16: 0.8707 - precision_16: 0.9861 - f1_score: 0.9238 - val_loss: 0.2702 - val_accuracy: 0.5791 - val_recall_16: 0.8089 - val_precision_16: 0.7827 - val_f1_score: 0.7937 - lr: 5.0000e-05\n","Epoch 4/20\n","1000/1000 [==============================] - 112s 112ms/step - loss: 3.3824e-04 - accuracy: 0.7046 - recall_16: 0.8865 - precision_16: 0.9837 - f1_score: 0.9322 - val_loss: 0.2727 - val_accuracy: 0.5849 - val_recall_16: 0.7747 - val_precision_16: 0.8112 - val_f1_score: 0.7894 - lr: 5.0000e-05\n","Epoch 5/20\n","1000/1000 [==============================] - 112s 112ms/step - loss: 2.3485e-04 - accuracy: 0.6966 - recall_16: 0.9125 - precision_16: 0.9777 - f1_score: 0.9438 - val_loss: 0.2428 - val_accuracy: 0.6562 - val_recall_16: 0.7622 - val_precision_16: 0.7975 - val_f1_score: 0.7765 - lr: 5.0000e-05\n","Epoch 6/20\n","1000/1000 [==============================] - 112s 112ms/step - loss: 1.9685e-04 - accuracy: 0.7044 - recall_16: 0.9334 - precision_16: 0.9844 - f1_score: 0.9586 - val_loss: 0.2372 - val_accuracy: 0.5779 - val_recall_16: 0.7632 - val_precision_16: 0.8086 - val_f1_score: 0.7820 - lr: 5.0000e-06\n","Epoch 7/20\n","1000/1000 [==============================] - 112s 112ms/step - loss: 1.8711e-04 - accuracy: 0.7057 - recall_16: 0.9411 - precision_16: 0.9903 - f1_score: 0.9651 - val_loss: 0.2327 - val_accuracy: 0.5794 - val_recall_16: 0.7639 - val_precision_16: 0.8102 - val_f1_score: 0.7836 - lr: 5.0000e-06\n","Epoch 8/20\n","1000/1000 [==============================] - 112s 112ms/step - loss: 1.8145e-04 - accuracy: 0.7057 - recall_16: 0.9434 - precision_16: 0.9921 - f1_score: 0.9674 - val_loss: 0.2296 - val_accuracy: 0.5749 - val_recall_16: 0.7646 - val_precision_16: 0.8133 - val_f1_score: 0.7853 - lr: 5.0000e-06\n","Epoch 9/20\n","1000/1000 [==============================] - 113s 113ms/step - loss: 1.7730e-04 - accuracy: 0.7058 - recall_16: 0.9470 - precision_16: 0.9930 - f1_score: 0.9696 - val_loss: 0.2322 - val_accuracy: 0.5799 - val_recall_16: 0.7712 - val_precision_16: 0.8111 - val_f1_score: 0.7878 - lr: 5.0000e-07\n","Epoch 10/20\n","1000/1000 [==============================] - 112s 112ms/step - loss: 1.7746e-04 - accuracy: 0.7041 - recall_16: 0.9478 - precision_16: 0.9933 - f1_score: 0.9704 - val_loss: 0.2327 - val_accuracy: 0.5786 - val_recall_16: 0.7729 - val_precision_16: 0.8088 - val_f1_score: 0.7878 - lr: 5.0000e-07\n"]}]},{"cell_type":"code","source":["modelMLP_unfreezed.save(os.path.join(checkpoint_path,'MLPModel_Unfreezed') ,save_format='tf')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1kU7BR_Bprpg","executionInfo":{"status":"ok","timestamp":1680098197671,"user_tz":-210,"elapsed":60624,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"}},"outputId":"0bbb8ec4-1de5-43ec-8921-a7b27bdecd1c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:Found untraced functions such as embeddings_layer_call_fn, embeddings_layer_call_and_return_conditional_losses, encoder_layer_call_fn, encoder_layer_call_and_return_conditional_losses, pooler_layer_call_fn while saving (showing 5 of 420). These functions will not be directly callable after loading.\n"]}]},{"cell_type":"markdown","source":["## **Train BertModel_D2_unfreezed**"],"metadata":{"id":"tc6fb3xTyk45"}},{"cell_type":"code","source":["model_name = 'BertModel_D2_unfreezed'\n","\n","BertModel_D2_unfreezed = BertModel(bert, config=config ,dense_layers_num=2)\n","BertModel_D2_unfreezed.unfreeze_bert_layers()\n","\n","history = train_model_with_checkpointing(BertModel_D2_unfreezed,model_name, X_train_v ,y_train, X_valid_v,y_valid, epochs = 20, batch_size = 32 ,learning_rate = 5e-05)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":470},"id":"CS4p6J57bXq-","executionInfo":{"status":"error","timestamp":1680094922219,"user_tz":-210,"elapsed":363532,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"}},"outputId":"19b32d30-04b3-4942-e90c-42ad64d37909"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","1000/1000 [==============================] - 183s 134ms/step - loss: 1.4511 - accuracy: 0.7424 - recall_12: 0.8660 - precision_12: 0.9161 - f1_score: 0.8954 - val_loss: 0.7981 - val_accuracy: 0.7732 - val_recall_12: 0.7722 - val_precision_12: 0.7999 - val_f1_score: 0.7832 - lr: 5.0000e-05\n","Epoch 2/20\n","1000/1000 [==============================] - 115s 115ms/step - loss: 0.3409 - accuracy: 0.8684 - recall_12: 0.5321 - precision_12: 0.9857 - f1_score: 0.6214 - val_loss: 0.4364 - val_accuracy: 0.7784 - val_recall_12: 0.0000e+00 - val_precision_12: 0.0000e+00 - val_f1_score: 0.0000e+00 - lr: 5.0000e-05\n","Epoch 3/20\n"," 580/1000 [================>.............] - ETA: 46s - loss: 0.1082 - accuracy: 0.7669 - recall_12: 3.6566e-04 - precision_12: 1.0000 - f1_score: 6.9271e-04"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-52-9bc3b612cbeb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mBertModel_D2_unfreezed\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munfreeze_bert_layers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_model_with_checkpointing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mBertModel_D2_unfreezed\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmodel_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_train_v\u001b[0m \u001b[0;34m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_valid_v\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_valid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m32\u001b[0m \u001b[0;34m,\u001b[0m\u001b[0mlearning_rate\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m5e-05\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-39-924b71b48d53>\u001b[0m in \u001b[0;36mtrain_model_with_checkpointing\u001b[0;34m(model, model_name, X_train_v, y_train, X_valid_v, y_valid, epochs, batch_size, learning_rate)\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m     \u001b[0;31m# Train the model with the checkpoint callback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 35\u001b[0;31m     history = model.fit(\n\u001b[0m\u001b[1;32m     36\u001b[0m             \u001b[0;34m{\u001b[0m\u001b[0;34m'input_ids'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mX_train_v\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'input_ids'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'attention_mask'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mX_train_v\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'attention_mask'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m}\u001b[0m \u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m             \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1648\u001b[0m                         ):\n\u001b[1;32m   1649\u001b[0m                             \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1650\u001b[0;31m                             \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1651\u001b[0m                             \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1652\u001b[0m                                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    878\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    879\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 880\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    881\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    882\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    910\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    911\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 912\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_no_variable_creation_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    913\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_variable_creation_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    914\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/eager/polymorphic_function/tracing_compiler.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    132\u001b[0m       (concrete_function,\n\u001b[1;32m    133\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[0;32m--> 134\u001b[0;31m     return concrete_function._call_flat(\n\u001b[0m\u001b[1;32m    135\u001b[0m         filtered_flat_args, captured_inputs=concrete_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[1;32m    136\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1743\u001b[0m         and executing_eagerly):\n\u001b[1;32m   1744\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1745\u001b[0;31m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0m\u001b[1;32m   1746\u001b[0m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[1;32m   1747\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    376\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0m_InterpolateFunctionError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcancellation_manager\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 378\u001b[0;31m           outputs = execute.execute(\n\u001b[0m\u001b[1;32m    379\u001b[0m               \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    380\u001b[0m               \u001b[0mnum_outputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_outputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     50\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     53\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     54\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["dir_path = os.path.join(checkpoint_path,'BertModel_D2_unfreezed' ,\"checkpoint\")\n","latest_checkpoint = tf.train.latest_checkpoint(dir_path)\n","BertModel_D2_unfreezed.load_weights(latest_checkpoint)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CLxX8rdlrZV2","executionInfo":{"status":"ok","timestamp":1680098671277,"user_tz":-210,"elapsed":2122,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"}},"outputId":"efe49bf5-393e-41c0-8b35-d60bace4e866"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.checkpoint.checkpoint.CheckpointLoadStatus at 0x7fd8ef43e9d0>"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["BertModel_D2_unfreezed.save(os.path.join(checkpoint_path,'BertModel_D2_unfreezed') ,save_format='tf')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4B6c-VKQr2Ru","executionInfo":{"status":"ok","timestamp":1680099325218,"user_tz":-210,"elapsed":31251,"user":{"displayName":"alireza tomari","userId":"12936819251647839805"}},"outputId":"51a51440-c946-4fbe-9519-8108b0678fd8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:Found untraced functions such as embeddings_layer_call_fn, embeddings_layer_call_and_return_conditional_losses, encoder_layer_call_fn, encoder_layer_call_and_return_conditional_losses, pooler_layer_call_fn while saving (showing 5 of 420). These functions will not be directly callable after loading.\n"]}]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["_7TyTPlJg9zT","rnfGBgzUtBdf","s_rqbtu6hi26","oe07XHVXjFVI","6l7F2AGD1prC","9HvEI3UmlO4U","SsReRlg1kFh1"],"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1678561565737}]},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}